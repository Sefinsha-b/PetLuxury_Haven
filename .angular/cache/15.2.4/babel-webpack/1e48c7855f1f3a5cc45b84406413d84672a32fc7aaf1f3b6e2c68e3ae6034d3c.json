{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AddVetService = /*#__PURE__*/(() => {\n  class AddVetService {\n    constructor(http) {\n      this.http = http;\n      this.Url = 'http://localhost:3000/vets/vet_in'; // Removed the trailing slash\n    }\n\n    PostVetApi(data) {\n      return this.http.post(`${this.Url}`, data); // Removed the extra slash\n    }\n\n    GetVetApi() {\n      return this.http.get(`${this.Url}`);\n    }\n\n    GetPutVet(id) {\n      return this.http.get(`${this.Url}/${id}`); // Corrected the URL\n    }\n\n    PutVet(id, data) {\n      return this.http.put(`${this.Url}/${id}`, data).pipe(catchError(error => {\n        console.error('Error editing vet:', error);\n        return throwError(error);\n      }));\n    }\n\n    deleteData(id) {\n      if (id) {\n        const url = `${this.Url}/${id}`;\n        console.log('DELETE URL:', url);\n        return this.http.delete(url);\n      } else {\n        // Handle the case where id is undefined or falsy\n        console.error('Invalid id:', id);\n        return throwError('Invalid id'); // You can use throwError or return an observable with an error\n      }\n    }\n\n  }\n\n  AddVetService.ɵfac = function AddVetService_Factory(t) {\n    return new (t || AddVetService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AddVetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddVetService,\n    factory: AddVetService.ɵfac,\n    providedIn: 'root'\n  });\n  return AddVetService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}